package first;

public class ObjectOriented {

	public static void main(String[] args) {
		
     /* 
            객체지향  ----------->   사물                 -> 객체
                                                       속성, 기능        -> 변수, 메서드
                                                       
                                               사물을 구성하는 설계도    -> 변수와 메서드를 가진 class(클래스)  ==> 객체의 설계도
      
        ※ 개념과 특징  : *필요할 때 *만들어서 사용한다 
                                           ┌실체화
        ※ 변수와 메서드를 정의하여 class를 만들고(객체생성),메모리에 올려서(인스턴스화)CPU가 인식하게 하여 자바 프로그램(메인메서드)에서 쓸 수 있게 함.
         1)  재사용성이 높다 !   
         2)  코드의 관리가 쉽다! 
         3)  신뢰성이 높은 프로그램이 개발 가능 (캡슐화로 데이터 보호가 가능)
      
                             
            클래스 -> 변수와 메서드를 정의해 놓은것. 객체를 생성하는데 사용
         인스턴스  -> 변수와 메서드를 사용
               객체 -> 속성과 기능을 가진 것. 자바에서는 속성->변수, 기능->메서드로 정의한다. 
               
 ex1) 변수  boolean power 
          메서드  void power(){ power = !power; } //전원 on/off
           
 ex2) 회원관리시스템 (객체)
           속성 : ID,이름,이메일,번호 =>변수
           기능 : 정보출력,수정  => 메서드      
           위를 실체화 시키면 회원관리 시스템을 통해 원하는 작업을 할 수 있음.            
  
            
      ★★  궁극적으로 사용하고자 하는 것은 클래스가 아닌 객체가 가지는 변수와 메서드이다.
      ★★  객체를 사용하려면 먼저 클래스로부터 객체를 생성해야한다.     
    
//---------------------------------------------------------------------------------------------------    
 
  -  참조변수는 저장되어있는 주소값을 불러오는 변수
                       매개변수로도 들어갈 수 있음.                      
                                     
    *** 참조변수의 선언   -> 클래스의 인스턴스화     
         즉, 클래스 파일의 변수와 메서드를 사용할 수 있는 상태로 만들어준다.
                   <------주소값대입  <---주소값 반환
        Class이름   변수이름(식별자)  =  new Class이름()
          <참조변수 선언 >            <인스턴스 생성!>
                                          
         ex) FruitSeller seller  = new FruitSeller();  
                                         └ 인스턴스는 new 클래스이름()입력하는 순간부터 생성.
          
     메서드 사용  --> 참조변수.메서드()
                            참조변수.변수이름   
      
      참조변수는 !=,==의 비교만 가능 연산 불가능         
      참조변수의 null 초기화    -> 아무것도 참조하지 않음.            
      인스턴스, 멤버변수 -> 초기화 생략가능, 메모리에서 자동으로 기본값으로 설정됨.
      
//--------------------------------------------------------------------------------------------------    
      */
		
	/*
	 * 선언 시점에 따른 변수의 종류	
	class Variable{
		int iv;           //인스턴스 변수 -> 각 인스턴스 마다 다른 값을 저장할 수 있음
		                                                                인스턴스 생성 후, 참조변수.인스턴스 변수명
		                                                                참조변수가 주어지지 않으면 가비지컬렉터에 의해 소멸      		                                                                                         
		static int cv;    //클래스 변수 -> 앞에 static이 붙으며 모든 인스턴스들이 공유하는 변수(공통된 값을 공유)
		                                                             주로 final과 자주 씀
		                                                             클래스가 메모리에 올라갈때 생성. 
		                                                             프로그램의 시작 때 생성,종료시 소멸 
		                                                             클래스이름.클래스변수명
		void method() {
			int Iv = 0;  //지역변수 -> 메서드 내에서만 유지
                                    {} 밖을 벗어나면 소멸			
		}		
	}
  -  지역변수는 메소드 내에 선언되어 메서드 호출 시 생성되고 메서드가 종료되면 소멸한다. 
 
  -  매개변수는 파라미터라고 불린다. 메서드에서 입력값을 받을 때 사용되는 변수로, 
          메소드 내에서 선언된 것이므로  마찬가지로 지역변수로 볼 수있다. 
          인자값은 호출 시 메서드입력부에 넣는 값이며 이 값은 매개변수에 대입된다. 
	
//----------------------------------------------------------------------------------------------------
	
	★ 인스턴스멤버와 클래스(static)멤버
	같은 클래스 안에서는 서로 호출이 가능하다 단!!!!!! 둘의 사용시점에 주의 해야한다.
	Because, 둘의 생성시점이 다르다.
	클래스 멤버 -> 변수, 메서드 
	  └프로그램 시작시 생성
	인스턴스 멤버 -> 변수, 메서드
	  └인스턴스 생성시 생성
	*/

/*		
//ex)		
class MemberCall{
	int iv = 10;   // 인스턴스 변수
	static int cv = 20; // 클래스 변수

	int iv2 = cv;
//	static int cv2 = iv; //클래스 변수는 인스턴스 변수를 사용할 수 없다. 생성시기가 다르므로
	static int cv2 = new MemberCall().iv; //이처럼 인스턴스를 생성하고 나서야 인스턴스 변수를 사용할 수 있음.
	                 //참조변수 선언을 하지않고 인스턴스를 생성하여 바로 불러옴.
	
    static void staticMethod1() {
    	 System.out.println(cv);
//    	 System.out.println(iv); //에러. 클래스 메서드에서 인스턴스 변수를 사용할 수 없다.
    	 MemberCall c = new MemberCall(); //new MemberCall() = c
    	 System.out.println(c.iv);
    }
    
   void instanceMethod() {
	   System.out.println(cv);
	   System.out.println(iv); //인스턴스 메서드에서는 인스턴스 변수를 바로 사용할 수 있다.
    }		
		
}
//-----------------------------------------------------------------------------------------------------
*/
		
		
}
}









