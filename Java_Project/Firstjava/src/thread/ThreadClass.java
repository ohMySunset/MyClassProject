package thread;

public class ThreadClass {

	public static void main(String[] args) {
		
		
/*
		 쓰레드?
		 실행되고 있는 일의 단위 
		 램과 CPU를 효율적으로 사용 -> 프로그램의 성능을 향상 
		  
		 매 프로세스가  RAM, CPU, Network을 가지고 한번에 하나의 일만 처리한다면 일의 효율이 떨어짐
		 쓰레드를 사용하면 프로세스에 새로운 작업환경을 할당해주어 여러 작업을 동시에 처리할 수 있도록 해줌.
		 
		 자바는 멀티쓰레드를 사용!		             
		                          ↗  쓰레드 1   
		  하나의 프로세스  → 쓰레드 2     => 각각의 쓰레드는 CPU, 메모리를 참조할 수 있음.
		                          ↘  쓰레드 3
		  
		 자바 런 타임 시스템 : 모니터와 조건 잠금 함수 제공  
		                         └> 작업을 중간에 잠시 중단 했다가 진행. 
		 
                   일반적으로 단일 CPU환경에서는 단위 시간에 하나의 프로그램만 실행하나,       
                   특정 기법으로 동시에 2개 이상의  프로그램을 동시에 진행 -> 시분할기법 "멀티태스킹" => 다중 쓰레드!     
                   
                   시분할 기법?
                   짧은 시간차를 두고 여러 프로그램을 전환하면서 실행   
                   빠른 속도 때문에 동시에 실행되는 것처럼 느껴지므로 멀티쓰레드를 가능하게 한다!        
                  
                   단점 : 동기화에 주의! ->> 프로그래머가 처리
                               교착상태 -> 데드락  (만약 두 쓰레드가 같은 처리를 한다면 데드락에 주의해야함, 프로그램이 멈추는 상황 발생.)        
         
        run(); -> main과 비슷한 실행포인트!
        Thread클래스를 상속 받을 때 
        Thread t = new Thread();
        t.start();  반드시 start()를 통해 시작해주어야 함! 
                  바로  run(); ->을 시작해버리면 인스턴스 메서드를 시작하는 것과 같음. 쓰레드의 시작으로 인식하지 않는다. 
            
                   
        synchronized : 다른 메서드가 변수를 참조하지 못하도록 Lock
                       하지만 인스턴스 전체는 단 하나의 열쇠만을 가지기 때문에 쓰레드가 인스턴스 내부의 한 메서드에 접근하면 다른 쓰레드에 접근하려는
                       다른 쓰레드도 대기 해야하는 문제가 생김.
                       그래서 동기화 블럭을 사용하여 각 쓰레드가 참조하는 영역을 지정해준다. 
                      
                   
*/
		
		
		
	}

	

}
